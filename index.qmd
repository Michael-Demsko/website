---
listing:
  contents: 
    - ideas/posts
    - music/posts
    - writing/posts
    - data/posts
    - design/posts
    - photo/posts
  type: grid
  sort: "date desc"
  fields: [date, title, categories]
---


```{r echo=FALSE}

# Load required libraries
library(DBI)
library(duckdb)

# Connect to DuckDB
con <- dbConnect(duckdb::duckdb(), "sitedata/photos.duckdb")

# Query for today's photo
today <- Sys.Date()
query <- paste0("SELECT title, image_path FROM photo_of_the_day WHERE post_date = '", today, "' LIMIT 1")
photo <- dbGetQuery(con, query)

# Disconnect the database
dbDisconnect(con)


```

<script src="https://cdnjs.cloudflare.com/ajax/libs/color-thief/2.3.0/color-thief.umd.js"></script>

<div class="photo_container">
  <img id="photo_of_the_day" src="`r photo$image_path`" alt="`r photo$title`" style="max-width: 100%; height: 750px; display: block; margin: 0 auto; border: 15px solid black"/>
  <p id="photo_text"> <b>photo of the day:</b> `r photo$title`</p>
</div>

<!-- Scroll indicator -->
<div class="scroll-indicator">
  <span class="arrow">&#8964;</span>
</div>

<div class="spacer"></div>

<script>

document.addEventListener("DOMContentLoaded", function () {
    const scrollIndicator = document.querySelector('.scroll-indicator');
    const sectionCards = document.querySelectorAll(".section-card");
    const postCards = document.querySelectorAll(".quarto-grid-item.card");

    // Utility function to check if an element is in the viewport
    const isInViewport = (element) => {
        const rect = element.getBoundingClientRect();
        return rect.top < window.innerHeight && rect.bottom > 0;
    };

    const fadeInOnScroll = () => {
        // New trigger point: hide the scroll indicator after scrolling down 150px
        const triggerHeight = 150; // Adjust the scroll height threshold as needed
        if (window.scrollY > triggerHeight) {
            scrollIndicator.style.opacity = '0'; // Hide the scroll indicator
            scrollIndicator.style.pointerEvents = 'none'; // Disable interaction
        } else {
            scrollIndicator.style.opacity = '1'; // Show the scroll indicator
            scrollIndicator.style.pointerEvents = 'auto'; // Enable interaction
        }

        // Fade in section cards
        sectionCards.forEach((card) => {
            if (isInViewport(card)) {
                card.classList.add("visible");
            }
        });

        // Fade in post cards with a delay
        postCards.forEach((post, index) => {
            if (isInViewport(post)) {
                setTimeout(() => {
                    post.classList.add("visible");
                }, index * 200); // Adjust delay as needed
            }
        });
    };

    // Add the scroll event listener
    window.addEventListener("scroll", fadeInOnScroll);

    // Trigger the fade-in for elements already in view on page load
    fadeInOnScroll();
});


</script>


<!-- JavaScript code to apply the color -->
<script>
  function darkenColor(rgbArray, factor) {
    return rgbArray.map(value => Math.floor(value * factor));
  }

  function applyColorFromImage() {
    const img = document.getElementById('photo_of_the_day');
    const colorThief = new ColorThief();

    // Wait until the image is fully loaded before processing
    if (img.complete) {
      // Get a palette of 10 colors from the image
      let palette = colorThief.getPalette(img, 10);

      // Check if the palette has at least 10 colors
      if (palette.length >= 10) {
        // Use the tenth most dominant color (index 9)
        let chosenColor = palette[9];
        let darkenedColor = darkenColor(chosenColor, 0.90); // Darken by 10%
        let colorString = `rgb(${darkenedColor.join(',')})`;

        // Apply the darkened color to the border
        img.style.borderColor = colorString;

        // Set the --dynamic-color CSS variable for the whole document
        document.documentElement.style.setProperty('--dynamic-color', colorString);
      } else {
        console.warn("Palette has less than 10 colors.");
      }
    } else {
      img.addEventListener('load', function() {
        let palette = colorThief.getPalette(img, 10);

        if (palette.length >= 10) {
          let chosenColor = palette[9];
          let darkenedColor = darkenColor(chosenColor, 0.90); // Darken by 10%
          let colorString = `rgb(${darkenedColor.join(',')})`;

          img.style.borderColor = colorString;
          document.documentElement.style.setProperty('--dynamic-color', colorString);
        } else {
          console.warn("Palette has less than 10 colors.");
        }
      });
    }
  }

  applyColorFromImage();
  
</script>

<script>

document.addEventListener("DOMContentLoaded", function () {
    const photoContainer = document.querySelector(".photo_container");
    const sectionCardsContainer = document.querySelector(".section-cards-container"); // Add a container around section cards
    const mainContent = document.querySelector(".main-content"); // Add a container for all content below the photo

    window.addEventListener("scroll", function () {
        const photoRect = photoContainer.getBoundingClientRect();

        if (photoRect.bottom < 0) {
            // When photo is out of view, add a class to reposition content
            sectionCardsContainer.classList.add("sticky");
            mainContent.classList.add("pushed-up");
        } else {
            // When photo is back in view, reset positioning
            sectionCardsContainer.classList.remove("sticky");
            mainContent.classList.remove("pushed-up");
        }
    });
});

</script>

<script>

// Maintain a set of active categories
const activeCategories = new Set();

function filterSectionCategory(element) {
  const category = element.getAttribute("data-category");
  const isActive = element.classList.contains("active");

  // Toggle the active state of the clicked section card
  if (isActive) {
    element.classList.remove("active");
    element.style.borderColor = ""; // Reset border color
    activeCategories.delete(category); // Remove category from the set
  } else {
    element.classList.add("active");
    const computedColor = window.getComputedStyle(element).color; // Get text color
    element.style.borderColor = computedColor;
    activeCategories.add(category); // Add category to the set
  }

  // Apply filter based on active categories
  applyMultiCategoryFilter();
}

// Function to filter posts based on selected categories
function applyMultiCategoryFilter() {
  const listingIds = Object.keys(window["quarto-listings"]);

  for (const listingId of listingIds) {
    const list = window["quarto-listings"][listingId];
    if (list) {
      // If no categories are active, reset filter to show all posts
      if (activeCategories.size === 0) {
        list.filter();
      } else {
        // Filter to include posts matching any of the active categories
        list.filter(function (item) {
          const itemValues = item.values();
          if (itemValues.categories !== null) {
            const categories = itemValues.categories.split(",");
            // Check if any of the active categories match the item's categories
            return Array.from(activeCategories).some(cat => categories.includes(cat));
          } else {
            return false;
          }
        });
      }
    }
  }
}

</script>

```{=html}
  <div class="section-cards-row">
    <a href="javascript:void(0)"
       class="section-card ideas"
       data-category="ideas"
       onclick="filterSectionCategory(this)">
      <span>ideas</span>
    </a>
    <a href="javascript:void(0)"
       class="section-card music"
       data-category="music"
       onclick="filterSectionCategory(this)">
      <span>music</span>
    </a>
    <a href="javascript:void(0)"
       class="section-card writing"
       data-category="writing"
       onclick="filterSectionCategory(this)">
      <span>writing</span>
    </a>
    <a href="javascript:void(0)"
       class="section-card data"
       data-category="data"
       onclick="filterSectionCategory(this)">
      <span>data</span>
    </a>
    <a href="javascript:void(0)"
       class="section-card design"
       data-category="design"
       onclick="filterSectionCategory(this)">
      <span>design</span>
    </a>
    <a href="javascript:void(0)"
       class="section-card photo"
       data-category="photo"
       onclick="filterSectionCategory(this)">
      <span>photo</span>
    </a>
</div>
```

